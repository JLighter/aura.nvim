-- 3rd party plugins highlights
local lush = require("lush")
local base = require("aura.base")
local styles = require("aura.settings").styles

local plugins = lush(function()
	return {
		-- netrw
		netrwDir({ base.AuraPurpleFaded }),
		netrwClassify({ base.AuraPurpleFaded }),
		netrwLink({ base.AuraGray }),
		netrwSymLink({ base.AuraForeground }),
		netrwExe({ base.AuraOrange }),
		netrwComment({ base.AuraGray }),
		netrwList({ base.AuraBlue }),
		netrwHelpCmd({ base.AuraPurpleFaded }),
		netrwCmdSep({ base.AuraForeground }),
		netrwVersion({ base.AuraGreen }),
		-- nvim-treesitter
		TSNone({}),
		TSError({ base.Error }),
		TSTitle({ base.Title }),
		TSLiteral({ base.String }),
		TSURI({ base.Underlined }),
		TSVariable({ base.AuraForeground }),
		TSPunctDelimiter({ base.Delimiter }),
		TSPunctBracket({ base.Delimiter }),
		TSPunctSpecial({ base.Delimiter }),
		TSConstant({ base.Constant }),
		TSConstBuiltin({ base.Special }),
		TSConstMacro({ base.Define }),
		TSString({ base.String }),
		TSStringRegex({ base.String }),
		TSStringEscape({ base.SpecialChar }),
		TSCharacter({ base.Character }),
		TSNumber({ base.Number }),
		TSBoolean({ base.Boolean }),
		TSFloat({ base.Float }),
		TSFunction({ base.Function }),
		TSFuncBuiltin({ base.Special }),
		TSFuncMacro({ base.Macro }),
		TSParameter({ base.Identifier }),
		TSParameterReference({ TSParameter }),
		TSMethod({ base.Function }),
		TSField({ base.Identifier }),
		TSProperty({ base.Identifier }),
		TSConstructor({ base.Special }),
		TSAnnotation({ base.PreProc }),
		TSAttribute({ base.PreProc }),
		TSNamespace({ base.Include }),
		TSConditional({ base.Conditional }),
		TSRepeat({ base.Repeat }),
		TSLabel({ base.Label }),
		TSOperator({ base.Operator }),
		TSKeyword({ base.Keyword }),
		TSKeywordFunction({ base.Keyword }),
		TSKeywordOperator({ TSOperator }),
		TSException({ base.Exception }),
		TSType({ base.Type }),
		TSTypeBuiltin({ base.Type }),
		TSInclude({ base.Include }),
		TSVariableBuiltin({ base.Special }),
		TSText({ TSNone }),
		TSStrong({ gui = styles.bold }),
		TSEmphasis({ gui = styles.italic_strings }),
		TSUnderline({ gui = styles.underline }),
		TSComment({ base.Comment }),
		TSStructure({ base.AuraOrange }),
		TSTag({ base.AuraOrange }),
		TSTagDelimiter({ base.AuraGreen }),
    -- gitsign
    GitSignsAddNr({ base.AuraGreen }),
    GitSignsChangeNr({ base.AuraOrange }),
    GitSignsDeleteNr({ base.AuraRed }),
    GitSignsAddLn({ base.AuraGreen }),
    GitSignsChangeLn({ base.AuraOrange }),
    GitSignsDeleteLn({ base.AuraRed }),
    GitSignsAdd({ base.AuraGreen }),
    GitSignsChange({ base.AuraOrange }),
    GitSignsDelete({ base.AuraRed }),
    -- nvimtree
    NvimTreeSymlink({ base.AuraGray }),
    NvimTreeFolderName({ base.AuraPurple }),
    NvimTreeRootFolder({ base.AuraPurpleBold }),
    NvimTreeFolderIcon({ base.AuraPuple }),
    NvimTreeEmptyFolderName({ base.AuraPurple }),
    NvimTreeOpenedFolderName({ base.AuraPurple }),
    NvimTreeExecFile({ base.AuraForegroundBold }),
    NvimTreeOpenedFile({ base.AuraGreen }),
    NvimTreeSpecialFile({ base.AuraBlue }),
    NvimTreeImageFile({ base.AuraForeground }),
    NvimTreeIndentMarker({ colors.BackgroundLighten }),

    LspDiagnosticsError({ base.healthError}),
    LspDiagnosticsWarning({ base.AuraOrangeBold }),
    LspDiagnosticsInformation({ base.AuraOrange }),
    LspDiagnosticsHint({ base.AuraForegroundUnderline }),

    NvimTreeGitDirty({ base.AuraOrange }),
    NvimTreeGitStaged({ base.AuraGreen }),
    NvimTreeGitMerge({ base.AuraRed }),
    NvimTreeGitRenamed({ base.AuraOrangeBold }),
    NvimTreeGitNew({ base.AuraGreen }),
    NvimTreeGitDeleted({ base.AuraRed }),
	}
end)

return plugins
